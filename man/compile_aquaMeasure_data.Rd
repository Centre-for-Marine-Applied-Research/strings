% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compile_aquaMeasure_data.R
\name{compile_aquaMeasure_data}
\alias{compile_aquaMeasure_data}
\title{Compiles temperature, dissolved oxygen, and/or salinity data from
 aquaMeasure sensors}
\usage{
compile_aquaMeasure_data(
  path.aM,
  area.name = "",
  serial.table.aM,
  deployment.range,
  trim = TRUE,
  export.csv = FALSE
)
}
\arguments{
\item{path.aM}{File path to the aquaMeasure folder.}

\item{area.name}{Area where the sensor(s) was deployed.}

\item{serial.table.aM}{A table with the serial number of each aquaMeasure on
the string, in the form "aquaMeasure-xxxxxx" (first column; note the capital
"M") and its corresponding depth in the form "2m" (second column).}

\item{deployment.range}{A dataframe with two columns. The first column holds
the deployment date (a Date object, POSIXct object, or character string in
the order year, month, day),  and the second column holds the retrieval
date (a Date object, POSIXct object, or character string in the order year,
month, day).}

\item{trim}{Logical value indicating whether to trim the data to the dates
specified in \code{deployment.range}. (Note: four hours are added to the
retrieval date to account for AST, e.g., in case the sensor was retrieved
after 20:00 AST, which is 00:00 UTC the next day.) Default is \code{trim =
TRUE}.}

\item{export.csv}{Logical value indicating whether to export the compiled
data as a .csv file. If \code{export.csv = TRUE}, the compiled data will
not be returned to the global environment. Default is \code{export.csv =
FALSE}.}
}
\value{
Returns a dataframe or exports a spreadsheet with the data compiled
 from each of the aquaMeasure sensors. Columns alternate between timestamp
 (UTC, in the format "Y-m-d H:M:S") and variable value (rounded to three
 decimal places). Metadata at the top of each column indicates the deployment
 and retrieval dates, the sensor serial number, the variable and depth of the
 sensor, and the timezone of the timestamp.

 To include the metadata, all values were converted to class
 \code{character}. To manipulate the data, the values must be converted to
 the appropriate class (e.g., \code{POSIXct} for the timestamps and
 \code{numeric} for variable values). This can be done using the function
 \code{convert_to_tidydata()}.
}
\description{
Compiles and formats data from aquaMeasure sensors.
}
\details{
The raw aquaMeasure data must be saved in a folder named aquaMeasure
 in .csv or .xlsx format.

 Rows with \code{undefined} and \code{... (time not set)} values in the
 \code{Timestamp(UTC)} column are filtered out.

 Negative Dissolved Oxygen values are converted to \code{NA}.

 "ERR" values are converted to \code{NA}.

 A warning message is printed if there are more than 1000 \code{NA} values
 for a given variable.

 All columns in are imported as characters to ensure the timestamp is parsed
 correctly. Timestamp must be saved in excel as a number or a character in
 the order "ymd IMS p", "Ymd IMS p", "Ymd HM", "Ymd HMS", "dmY HM", or "dmY
 HMS".

 There still may be parsing errors because there are not entries in every
 column. This should not affect the data compilation. To check, save the
 spreadsheet with a new name new, delete the column causing the error (likely
 the "Text" column), re-run the function, and verify that there is no parsing
 error.
}
\examples{
# path to "aquaMeasure" folder
path <- system.file("extdata", package = "strings")
# Sensor and depth at which it was deployed
serial.table <- data.frame("SENSOR" = "aquaMeasure-670364", "DEPTH" = "5m")
# deployment and retrieval dates
deployment <- data.frame("START" = "2019-05-30", "END" = "2019-10-19")

aM_data <- compile_aquaMeasure_data(path.aM =  path,
serial.table.aM = serial.table,
deployment.range = deployment)
}
\seealso{
Other compile: 
\code{\link{compile_HOBO_data}()},
\code{\link{compile_all_data}()},
\code{\link{compile_vemco_data}()},
\code{\link{read_deployment_log}()}
}
\author{
Danielle Dempsey
}
\concept{compile}
